import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import structural_similarity as ssim
from skimage.metrics import peak_signal_noise_ratio as psnr

galaxy = np.load('galaxy.npy')
psf = np.load('psf.npy')

# We're normalizing to a flux of 1.
galaxy = galaxy / galaxy.sum()
psf = psf / psf.sum() 

# Necessary Functions
def pad_double(img):
    H, W = img.shape[-2], img.shape[-1]
    return np.pad(img, ((W//2, W//2), (H//2, H//2)), 'constant', constant_values=(0, 0))

def crop_half(img):
    H, W = img.shape
    return img[H//4:3*H//4, W//4:3*W//4]

def convolve(x, h):
    h, x = pad_double(h), pad_double(x)
    y = fftshift(ifft2(fft2(ifftshift(h)) * fft2(ifftshift(x)))).real
    return crop_half(y)

#Now we're defining some important parameters for telescopes!
pixel_scale = 0.2                   # Pixel scale (aresec), determines the image resolution.
exp_time = 30.                      # Exposure time (2*15 seconds).
sky_brightness = 20.46              # Sky brightness (absolute magnitude) in i band.
zero_point = 28.17                  # Instrumental zero point in i band, i.e. absolute magnitude that would produce one e- per second.
qe = 0.94                           # CCD Quantum efficiency.
read_noise = 8.8                    # Standrad deviation of Gaussain read noise (e-/pixel).
dark_current = 0.2                  # Dark current (e-/pixel/second).

#Get the flux!
def get_flux(exp_time, ab_magnitude, zero_point, qe):
    flux = exp_time * 10**(-.4 * (ab_magnitude - zero_point)*qe)
    return flux

# Calculate the per pixel sky level (e-/pixel).
sky_level_pixel = (pixel_scale ** 2) * get_flux(ab_magnitude=sky_brightness, exp_time=exp_time, zero_point=zero_point, qe=qe)

#Now we're going to get the noise in the image
def get_total_noise(sky_level_pixel, dark_current, exp_time, read_noise):
  snr = sky_level_pixel +  dark_current + 2*read_noise
  return snr

sigma = get_total_noise(sky_level_pixel, dark_current, exp_time, read_noise)

# The SNR is the Signal to Noise Ratio
snr_list = [60, 100, 200, 300]
obs_list, gt_list = [], []

# We're going to convolve the image
for snr in snr_list:
  alpha = snr * sigma/np.sqrt(np.sum(galaxy**2))
  g = galaxy * alpha
  n = np.random.normal(0, sigma, g.shape) # Gaussian noise.
  y = convolve(g, psf) + n
  gt_list.append(g)
  obs_list.append(y)

# We are going to use Weiner filtering to deconvolve the image in fourier space.
def wiener(y, h, lam):
    H = fft2(ifftshift(h)) # 2D Fourier Transform of the PSF.
    H_star = H.conj() # Complex conjugate of the 2D Fourier Transform of the PSF.
    Y = fft2(ifftshift(y)) # 2D Fourier Transform of the blurry image.
    numerator = H_star * Y
    divisor = abs(H)**2 + lam
    x = fftshift(ifft2(numerator/divisor)).real
    return x

lam_list = [0.02, 0.05, 0.1, 0.2] # Change to compare different regularization parameters.

# Creating the image!
fig = plt.figure(figsize=(16, 10.5))
for idx, (x, y, snr) in enumerate(zip(gt_list, obs_list, snr_list)):
    norm = Normalize(vmin=y.min(), vmax=x.max())
    ax1 = plt.subplot(4,6,6*idx+1)
    plt.imshow(y, cmap='magma', norm=norm)
    plt.ylabel(f'SNR = {snr}', fontsize=15)
    ax1.set_xticks([])
    ax1.set_yticks([])
    plt.title('PSNR={:.1f}'.format(psnr(x, y, data_range=x.max()-x.min())), fontsize=11, loc='left', x=0.03, y=0.0, color='white')
    plt.title('SSIM={:.2f}'.format(ssim(x, y, data_range=x.max()-x.min())), fontsize=11, loc='right', x=0.5, y=0.84, color='white')
    if idx == 0:
        plt.title('Observed Galaxy', fontsize=15)
    
    
    for i, lam in enumerate(lam_list):
        x_star = wiener(y, psf, lam)
        ax2 = plt.subplot(4,6,6*idx+i+2)
        plt.imshow(wiener(y, psf, lam), cmap='magma', norm=norm)
        ax2.set_xticks([])
        ax2.set_yticks([])
        plt.title('PSNR={:.1f}'.format(psnr(x, x_star, data_range=x.max()-x.min())), fontsize=11, loc='left', x=0.03, y=0.0, color='white')
        plt.title('SSIM={:.2f}'.format(ssim(x, x_star, data_range=x.max()-x.min())), fontsize=11, loc='right', x=0.5, y=0.84, color='white')
        if idx == 0:
            plt.title('Wiener ($\lambda=${:.1g})'.format(lam), fontsize=15)
        
        
    ax4 = plt.subplot(4,6,6*idx+6)
    plt.imshow(x, cmap='magma', norm=norm)
    plt.title('PSNR={:.1f}'.format(psnr(x, x, data_range=x.max()-x.min())), fontsize=11, loc='left', x=0.03, y=0.0, color='white')
    plt.title('SSIM={:.2f}'.format(ssim(x, x, data_range=x.max()-x.min())), fontsize=11, loc='right', x=0.5, y=0.84, color='white')
    if idx == 0:
        plt.title('Ground Truth', fontsize=15)
    cax = fig.add_axes([ax2.get_position().x1+0.14, ax2.get_position().y0, 0.01, ax2.get_position().height])
    cb = plt.colorbar(cax=cax, norm=norm)
    cb.set_label('Flux (e-)', fontsize=14)
    ax4.set_xticks([])
    ax4.set_yticks([])